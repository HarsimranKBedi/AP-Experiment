class Solution {
    public int maxProfit(int[] prices) {
        //0 ->false
        //1 ->true
        int[][]dp = new int[prices.length][2];
        for(int[]arr:dp){
            Arrays.fill(arr,-1);
        }
        int buy = 1;
        return helper(prices,0,buy,dp);
    }
    public int helper(int[]prices,int day,int buy,int[][]dp){
        if(day>=prices.length){
            return 0;
        }
        if(dp[day][buy]!=-1){
            return dp[day][buy];
        }
        int profit = 0;
        if(buy==1){
            int buy_fr = helper(prices,day+1,0,dp)-prices[day];
            int buy_not = helper(prices,day+1,1,dp);
            profit = Math.max(buy_fr,buy_not);
        }
        else{
            int sell_fr = helper(prices,day,1,dp)+prices[day];
            int sell_not = helper(prices,day+1,0,dp);
            profit = Math.max(sell_fr,sell_not);
        }
        return dp[day][buy]=profit;
    }
}

V=class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0 || s.charAt(0) == '0') return 0;
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            if (s.charAt(i - 1) != '0') dp[i] += dp[i - 1];
            int twoDigit = Integer.parseInt(s.substring(i - 2, i));
            if (twoDigit >= 10 && twoDigit <= 26) dp[i] += dp[i - 2];
        }
        return dp[n];
    }
}

class Solution {
    public boolean validPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return isPalindrome(s, left + 1, right) || isPalindrome(s, left, right - 1);
            }
            left++;
            right--;
        }
        return true;
    }

    private boolean isPalindrome(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }
}
